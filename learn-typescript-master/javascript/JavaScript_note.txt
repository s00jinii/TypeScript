1. data Type

primitive Type
    - Number
    - String
    - Boolean
    - null
    - undefined

reference Type
    -object ( Array / Function / RegExp)

실행 콘텐스트 execution Context 
: 실행에 필요한 코드 흐름상의 배경이 되는 조건 / 환경 
-동일한 조건, 환경을 지니는 코드 뭉치

lexical Environment (전역)
EnvironmentRecord : 현재 문맥의 식별자 정보 : hoisting

outerEnvironmentReference
현재 문맥에 관련 있는 외부 식별자 정보

3. this
- 전역공간에서 : window/global
- 함수호출시 : window/global
- 메소드 호출시 : 메소드 호출 주체 (메소드명 앞)
    > 함수는 전역객체의 매소드다.
    > 내부함수에서의 우회법 javaScript.js 3-3-1 참고
- callback 호출시 : 기본적으로는 함수 내부에서와 동일
    > call, apply,bind 메소드에 대하여
    > call, apply: 즉시 호출 / bind: 새로운 함수 생성(currying)
    > 기본적으로 함수의 this와 같다.
    > 제어권을 가진 함수가 callback의 this를 명시한 경우 그에 따른다.
    > 개발자가 this를 바인딩한 채로 callback을 넘기면 그에 따른다.
- 생성자 함수 호출시 : 인스턴스

4. callback 함수
- 제어권을 넘긴다
    > 실행시점
    > 인자
    > this
- 다른함수 (a)의 인자로 콜백함수 (b)를 전달하면, a가 b의 제어권을 갖게 된다. 
- 특별한 요청(bind)이 없는 한 a에 미리 정해놓은 방식에 따라 b를 호출한다.
- 미리 정해 놓은 방식이란 어떤 시점에 콜백을 호출할지, 인잔에는 어떤 값들을 지정할지, this에 무엇을 바인딩할지 등이다.

5. closure

6. prototype
//6-2 메소드 상속 및 동작원리 

7. class
Array
- from() / isArray() / of() : Static methods
- arguments() / length() / name : Static properties
- prototype : concat() / filter() / forEach() / Map() / push() / Pop() : methods 


